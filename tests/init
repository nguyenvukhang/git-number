#!/usr/bin/env bash

clear

_N='\033[0m'    # Normal/Reset
_R='\033[0;31m' # Red
_G='\033[0;32m' # Green
_Y='\033[0;33m' # Yellow
_B='\033[0;34m' # Blue
_P='\033[0;35m' # Purple
_C='\033[0;36m' # Cyan
_S='\033[0;37m' # Gray

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
REPO=$SCRIPT_DIR/repo

# execute this when script stops suddenly
# trap "rm -rf $REPO" EXIT

divider() {
  printf "${_S}.........................................................${_N}\n"
}

title() {
  divider
  printf "[ ${_Y}$1${_N} ]\n"
}

make_file() {
  [ -z $1 ] && return 0
  touch $1 && echo "$1">$1
}

initialize() {
  # effectively cd to SCRIPT_DIR
  pushd $SCRIPT_DIR
  # clear old implementations
  rm -rf repo
  # create test repository root directory
  mkdir repo &>/dev/null
  # cd to repo
  pushd repo
  # initialize git repo
  git init
}

quit() {
  # navigate back
  popd
  popd
}

file_structure() {
  # for peaceful purposes
  mkdir -p some/thing/is/up
  pushd some
  make_file gold
  pushd thing
  make_file silver
  pushd is
  make_file bronze
  pushd up
  make_file rose_gold
  popd; popd; popd; popd
}

first_commit() {
  # create an "existing" set of 10 files
  # to use to get "modified" status later
  list=(
    staged-modified
    staged-deleted
    staged-pre-rename
    unstaged-modified
    unstaged-deleted
    unstaged-pre-rename
    staged-modified-then-modified
    staged-deleted-then-created
  )
  for i in ${list[@]}; do
    make_file $i
  done
  git add .
  git commit -m "first commit"
}

staged() {
  # modified
  echo "smash">staged-modified
  git add staged-modified
  # deleted
  rm staged-deleted
  git add staged-deleted
  # renamed
  mv staged-pre-rename staged-post-rename
  git add staged-pre-rename staged-post-rename
  # new file
  make_file "staged-new-file"
  git add staged-new-file
}

staged_then() {
  # modified, staged, then modified again
  echo "one">staged-modified-then-modified
  git add staged-modified-then-modified
  echo "two">staged-modified-then-modified
  # deleted, staged, then modified again
  rm staged-deleted-then-created
  git add staged-deleted-then-created
  make_file staged-deleted-then-created
}

unstaged() {
  # modified
  echo "smash">unstaged-modified
  # deleted
  rm unstaged-deleted
  # rename (echo is unstaged, unstaged-post-rename will be untracked)
  mv unstaged-pre-rename unstaged-post-rename
  # delete a modified file
  rm staged-modified
}

untracked () {
  touch untracked-new-file
}

show() {
  title "GIT STATUS"
  git status
  title "GIT LOG"
  git log --all --oneline --graph
  title "FILES"
  ls
  divider
}

initialize > /dev/null
file_structure > /dev/null
first_commit > /dev/null
staged > /dev/null
staged_then > /dev/null
unstaged > /dev/null
untracked > /dev/null
show
quit > /dev/null
