#!/usr/bin/env python3

import subprocess
import pprint
import json
import sys
from data_structure import *
from _git import git
from shell import system, system_std
from tests import debug
from log import log

pp = pprint.PrettyPrinter(indent=4).pprint

ansi = ["\x1b[32m", "\x1b[31m", "\x1b[m"]


def print_and_extract_git_status(args: list[str], checkpoints: list[str], silent: bool):
    def cprint(*args, end):
        if silent:
            return
        print(*args, end=end)

    cmd = ["git", "-c", "status.color=always", "status"]
    cmd.extend(args)
    stdout, _ = system_std(cmd)
    if not stdout:
        return

    result, index, counting = [], 1, False

    while stdout.readable():
        line = stdout.readline()
        if not line:
            break
        stripped = line.strip()
        for i in ansi:
            stripped = stripped.replace(i, "")
        result.append((index, stripped))
        if counting:
            if stripped == "":
                counting = False
                cprint(line, end="")
            elif stripped in checkpoints:
                cprint(line, end="")
            else:
                cprint(index, line, end="")
                index += 1
        else:
            if stripped in checkpoints:
                counting = True
            cprint(line, end="")
    return result


def get_cache_filepath() -> str:
    cache_directory = system(["git", "rev-parse", "--git-dir"])
    return "%s/gitn.json" % (cache_directory)


def update_cache(cache_filepath: str, table: dict):
    with open(cache_filepath, "w") as f:
        json.dump(table, f)


def retrieve_table() -> tuple[bool, dict]:
    table = {}
    status = True
    try:
        with open(get_cache_filepath(), "r") as f:
            table = json.load(f)
    except:
        status = False
    return (status, table)


# print and extract git status
# enumerate git status
# update cache
def gitn_status(args, silent=False):
    git_status = print_and_extract_git_status(args, git.set_state_keys, silent)
    if not git_status:
        return
    table = create_table(git_status)
    update_cache(get_cache_filepath(), table)


def expand_ranges(args: list[str]) -> list[str]:
    result = []
    if len(args) == 0:
        return []
    for arg in args:
        # straight bypass for certain keywords
        if arg in git.commands:
            result.append(arg)
            continue
        # handle number ranges
        if "-" in arg:
            try:
                split = list(map(int, arg.split("-")))
            except:
                result.append(arg)
                continue
            if len(split) != 2 and not all(isinstance(x, int) for x in split):
                result.append(arg)
                continue
            result.extend(map(str, range(split[0], split[1] + 1)))
        # bypass for the rest
        else:
            result.append(arg)
    return result


# processes arguments, and returns the list of processed args
def handle_arguments(args: list[str]) -> list[str]:
    num_args = len(args)
    command, command_index = git.get_commmand(args)
    if num_args <= 1 or command == "status":
        gitn_status(args[command_index + 1 :])
        return args
    # from here on there are at least two args
    # if gitn command doesn't include status
    # it's essentially a full bypass with the numbers as file aliases
    args[0] = "git"
    args[1:] = expand_ranges(args[1:])
    table_exists, table = retrieve_table()
    if table_exists:
        return args
        # do the mapping
    else:
        return args
        # do a full bypass


def main():
    args = debug(sys.argv, handle_arguments)
    handle_arguments(args)


if __name__ == "__main__":
    main()
