#!/usr/bin/env python3

import subprocess
import pprint
import json
import sys
from data_structure import *
from git_utils import git
from shell import system

pp = pprint.PrettyPrinter(indent=4).pprint


class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


ansi = ["\x1b[32m", "\x1b[31m", "\x1b[m"]


def print_and_extract_git_status(args: list[str], checkpoints: list[str]):
    result = []
    cmd = ["git", "-c", "status.color=always", "status"]
    cmd.extend(args)
    process = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        universal_newlines=True,
    )
    if not process.stdout:
        return
    index = 1
    counting = False
    while process.stdout.readable():
        line = process.stdout.readline()
        if not line:
            break
        stripped = line.strip()
        for i in ansi:
            stripped = stripped.replace(i, "")
        result.append((index, stripped))
        if counting:
            if stripped == '':
                counting = False
                print(line, end="")
            elif stripped in checkpoints:
                print(line, end="")
            else:
                print(index, line, end="")
                index += 1
        else:
            if stripped in checkpoints:
                counting = True
            print(line, end="")
    return result


def get_cache_filepath() -> str:
    cache_directory = system(["git", "rev-parse", "--git-dir"])
    return "%s/gitn.json" % (cache_directory)


def update_cache(cache_filepath: str, table: dict):
    with open(cache_filepath, "w") as f:
        json.dump(table, f)


# read from existing cache (do a full git bypass if there's no cache)
def gitn_add(args):
    # handles ranges in gitn add
    # gitn add 2-5 === gitn add 2 3 4 5
    add_range, rm_range = [], []
    for arg in args:
        if "-" in arg:
            try:
                split = list(map(int, arg.split("-")))
            except:
                continue
            if len(split) != 2 and not all(isinstance(x, int) for x in split):
                continue
            rm_range.append(arg)
            add_range.extend(map(str, range(split[0], split[1] + 1)))
    for i in rm_range:
        args.remove(i)
    args.extend(add_range)
    # read existing cache
    git_command = ["git", "add", "--"]
    table = {}
    try:
        with open(get_cache_filepath(), "r") as f:
            table = json.load(f)
        add_list = list(
            map(lambda x: get_filename(table.get(x, make_empty_entry())), args)
        )
        git_command.extend(add_list)
    except:
        git_command.extend(args)
    git_command = list(filter(None, git_command))
    # subprocess.run(git_command)


# print and extract git status
# enumerate git status
# update cache
def gitn_status(args):
    print('gitn status args:', args)
    git_status = print_and_extract_git_status(args, git.set_state_keys)
    if not git_status:
        return
    table = create_table(git_status)
    update_cache(get_cache_filepath(), table)


def expand_ranges(args: list[str]) -> list[str]:
    result = []
    if len(args) == 0:
        return []
    for arg in args:
        # straight bypass for certain keywords
        if arg in git.commands:
            result.append(arg)
            continue
        # handle number ranges
        if "-" in arg:
            try:
                split = list(map(int, arg.split("-")))
            except:
                result.append(arg)
                continue
            if len(split) != 2 and not all(isinstance(x, int) for x in split):
                result.append(arg)
                continue
            result.extend(map(str, range(split[0], split[1] + 1)))
        # bypass for the rest
        else:
            result.append(arg)
    return result


def get_git_command(args: list[str]) -> tuple[str, int]:
    for i in range(len(args)):
        word = args[i]
        if word in git.commands:
            return (word, i)
    return ("", 0)


def handle_arguments(args: list[str]):
    num_args = len(args)
    command, command_index = get_git_command(args)
    if num_args <= 1 or command == "status":
        print("final", args)
        gitn_status(args[command_index + 1 :])
        return
    # from here on there are at least two args
    args[0] = "git"
    args[1:] = expand_ranges(args[1:])
    print("final", args)


def main():
    handle_arguments(sys.argv)


if __name__ == "__main__":
    main()
